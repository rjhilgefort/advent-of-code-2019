// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function intcode(program, _$staropt$star, _param) {
  while(true) {
    var $staropt$star = _$staropt$star;
    var position = $staropt$star !== undefined ? $staropt$star : 0;
    var match = Caml_array.caml_array_get(program, position);
    var switcher = match - 1 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        var arg1Position = Caml_array.caml_array_get(program, position + 1 | 0);
        var arg2Position = Caml_array.caml_array_get(program, position + 2 | 0);
        var resPosition = Caml_array.caml_array_get(program, position + 3 | 0);
        Caml_array.caml_array_set(program, resPosition, Caml_int32.imul(Caml_array.caml_array_get(program, arg1Position), Caml_array.caml_array_get(program, arg2Position)));
        _param = /* () */0;
        _$staropt$star = position + 4 | 0;
        continue ;
      } else {
        var arg1Position$1 = Caml_array.caml_array_get(program, position + 1 | 0);
        var arg2Position$1 = Caml_array.caml_array_get(program, position + 2 | 0);
        var resPosition$1 = Caml_array.caml_array_get(program, position + 3 | 0);
        Caml_array.caml_array_set(program, resPosition$1, Caml_array.caml_array_get(program, arg1Position$1) + Caml_array.caml_array_get(program, arg2Position$1) | 0);
        _param = /* () */0;
        _$staropt$star = position + 4 | 0;
        continue ;
      }
    } else if (switcher !== 98) {
      console.log("Encountered unhandled `opCode`");
      return program;
    } else {
      return program;
    }
  };
}

exports.intcode = intcode;
/* No side effect */
