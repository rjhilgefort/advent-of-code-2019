// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Utils$AdventOfCode2019 = require("../Utils.bs.js");

function intcode(program, _$staropt$star, _param) {
  while(true) {
    var $staropt$star = _$staropt$star;
    var position = $staropt$star !== undefined ? $staropt$star : 0;
    var match = Caml_array.caml_array_get(program, position);
    var switcher = match - 1 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        var arg1Position = Caml_array.caml_array_get(program, position + 1 | 0);
        var arg2Position = Caml_array.caml_array_get(program, position + 2 | 0);
        var resPosition = Caml_array.caml_array_get(program, position + 3 | 0);
        Caml_array.caml_array_set(program, resPosition, Caml_int32.imul(Caml_array.caml_array_get(program, arg1Position), Caml_array.caml_array_get(program, arg2Position)));
        _param = /* () */0;
        _$staropt$star = position + 4 | 0;
        continue ;
      } else {
        var arg1Position$1 = Caml_array.caml_array_get(program, position + 1 | 0);
        var arg2Position$1 = Caml_array.caml_array_get(program, position + 2 | 0);
        var resPosition$1 = Caml_array.caml_array_get(program, position + 3 | 0);
        Caml_array.caml_array_set(program, resPosition$1, Caml_array.caml_array_get(program, arg1Position$1) + Caml_array.caml_array_get(program, arg2Position$1) | 0);
        _param = /* () */0;
        _$staropt$star = position + 4 | 0;
        continue ;
      }
    } else {
      return program;
    }
  };
}

function intcodeOverride(program, noun, verb, param) {
  return intcode(Utils$AdventOfCode2019.update(2, verb, Utils$AdventOfCode2019.update(1, noun, program)), undefined, /* () */0);
}

function computeNounVerb(program, desiredOutput, $staropt$star, param) {
  var maxVal = $staropt$star !== undefined ? $staropt$star : 99;
  var found = false;
  var breakNoun = false;
  var breakVerb = false;
  var noun = 0;
  var verb = 0;
  while(!found && !breakNoun) {
    verb = 0;
    breakVerb = false;
    while(!found && !breakVerb) {
      var output = Utils$AdventOfCode2019.head(intcodeOverride($$Array.copy(program), noun, verb, /* () */0));
      if (output === desiredOutput) {
        found = true;
      }
      if (verb < maxVal && !found) {
        verb = verb + 1 | 0;
      } else {
        breakVerb = true;
      }
    };
    if (noun < maxVal && !found) {
      noun = noun + 1 | 0;
    } else {
      breakNoun = true;
    }
  };
  var match = found;
  if (match) {
    return /* tuple */[
            noun,
            verb
          ];
  } else {
    return /* tuple */[
            -1,
            -1
          ];
  }
}

exports.intcode = intcode;
exports.intcodeOverride = intcodeOverride;
exports.computeNounVerb = computeNounVerb;
/* No side effect */
